import 'dart:convert';
import 'package:flutter/foundation.dart';
// Firebase temporarily disabled for iOS build
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:crypto/crypto.dart';
import 'package:encrypt/encrypt.dart';
import '../models/cycle_data.dart';
import '../models/daily_tracking_data.dart';
import '../models/biometric_data.dart';
import 'database_service.dart';
import 'user_preferences_service.dart';

/// Cloud sync service - Firebase disabled for iOS build
/// This provides a local-only implementation until Firebase is re-enabled
class CloudSyncService {
  final DatabaseService _databaseService = DatabaseService();
  final UserPreferencesService _preferencesService = UserPreferencesService();
  final bool _firebaseAvailable = false;
  
  // Encryption
  late final Encrypter _encrypter;
  late final IV _iv;
  
  // Sync state
  bool _isSyncing = false;
  DateTime? _lastSyncTime;
  
  CloudSyncService() {
    _initializeEncryption();
  }
  
  void _initializeEncryption() {
    // Generate encryption key from user's device ID and app secret
    final key = Key.fromSecureRandom(32);
    _encrypter = Encrypter(AES(key));
    _iv = IV.fromSecureRandom(16);
  }
  
  // Getters
  bool get isSyncing => _isSyncing;
  DateTime? get lastSyncTime => _lastSyncTime;
  User? get currentUser => _auth.currentUser;
  bool get isSignedIn => currentUser != null;
  
  // Authentication
  Future<UserCredential> signInWithEmailAndPassword(String email, String password) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      await _setupUserDocument(credential.user!);
      return credential;
    } catch (e) {
      debugPrint('Error signing in: $e');
      rethrow;
    }
  }
  
  Future<UserCredential> createUserWithEmailAndPassword(String email, String password) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      await _setupUserDocument(credential.user!);
      return credential;
    } catch (e) {
      debugPrint('Error creating user: $e');
      rethrow;
    }
  }
  
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      _lastSyncTime = null;
    } catch (e) {
      debugPrint('Error signing out: $e');
      rethrow;
    }
  }
  
  // Cloud sync operations
  Future<void> syncToCloud({bool force = false}) async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to sync');
    }
    
    if (_isSyncing && !force) {
      debugPrint('Sync already in progress');
      return;
    }
    
    _isSyncing = true;
    
    try {
      await _syncCyclesToCloud();
      await _syncTrackingDataToCloud();
      await _syncBiometricDataToCloud();
      await _syncUserPreferencesToCloud();
      
      _lastSyncTime = DateTime.now();
      await _preferencesService.setLastSyncTime(_lastSyncTime!);
      
      debugPrint('Cloud sync completed successfully');
    } catch (e) {
      debugPrint('Error syncing to cloud: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }
  
  Future<void> syncFromCloud({bool force = false}) async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to sync');
    }
    
    if (_isSyncing && !force) {
      debugPrint('Sync already in progress');
      return;
    }
    
    _isSyncing = true;
    
    try {
      await _syncCyclesFromCloud();
      await _syncTrackingDataFromCloud();
      await _syncBiometricDataFromCloud();
      await _syncUserPreferencesFromCloud();
      
      _lastSyncTime = DateTime.now();
      await _preferencesService.setLastSyncTime(_lastSyncTime!);
      
      debugPrint('Cloud sync completed successfully');
    } catch (e) {
      debugPrint('Error syncing from cloud: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }
  
  Future<void> bidirectionalSync() async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to sync');
    }
    
    if (_isSyncing) {
      debugPrint('Sync already in progress');
      return;
    }
    
    _isSyncing = true;
    
    try {
      // Get last sync time to determine what needs syncing
      final lastSyncTime = await _preferencesService.getLastSyncTime();
      final cloudLastModified = await _getCloudLastModified();
      
      if (lastSyncTime == null) {
        // First sync - upload local data
        await syncToCloud(force: true);
      } else if (cloudLastModified != null && cloudLastModified.isAfter(lastSyncTime)) {
        // Cloud has newer data - download
        await syncFromCloud(force: true);
      } else {
        // Local data is newer or same - upload
        await syncToCloud(force: true);
      }
      
      debugPrint('Bidirectional sync completed successfully');
    } catch (e) {
      debugPrint('Error in bidirectional sync: $e');
      rethrow;
    } finally {
      _isSyncing = false;
    }
  }
  
  // Data encryption/decryption
  Map<String, dynamic> _encryptData(Map<String, dynamic> data) {
    final jsonString = jsonEncode(data);
    final encrypted = _encrypter.encrypt(jsonString, iv: _iv);
    return {
      'encryptedData': encrypted.base64,
      'iv': _iv.base64,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    };
  }
  
  Map<String, dynamic> _decryptData(Map<String, dynamic> encryptedData) {
    final encrypted = Encrypted.fromBase64(encryptedData['encryptedData']);
    final iv = IV.fromBase64(encryptedData['iv']);
    final decrypted = _encrypter.decrypt(encrypted, iv: iv);
    return jsonDecode(decrypted);
  }
  
  // Private sync methods
  Future<void> _setupUserDocument(User user) async {
    final userDoc = _firestore.collection('users').doc(user.uid);
    final docSnapshot = await userDoc.get();
    
    if (!docSnapshot.exists) {
      await userDoc.set({
        'email': user.email,
        'createdAt': FieldValue.serverTimestamp(),
        'lastModified': FieldValue.serverTimestamp(),
        'syncEnabled': true,
        'encryptionEnabled': true,
      });
    }
  }
  
  Future<DateTime?> _getCloudLastModified() async {
    try {
      final userDoc = await _firestore
          .collection('users')
          .doc(currentUser!.uid)
          .get();
      
      if (userDoc.exists) {
        final data = userDoc.data()!;
        final timestamp = data['lastModified'] as Timestamp?;
        return timestamp?.toDate();
      }
    } catch (e) {
      debugPrint('Error getting cloud last modified: $e');
    }
    return null;
  }
  
  Future<void> _syncCyclesToCloud() async {
    final cycles = await _databaseService.getAllCycles();
    final cyclesCollection = _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('cycles');
    
    final batch = _firestore.batch();
    
    for (final cycle in cycles) {
      final cycleData = cycle.toMap();
      final encryptedData = _encryptData(cycleData);
      
      final docRef = cyclesCollection.doc(cycle.id);
      batch.set(docRef, encryptedData, SetOptions(merge: true));
    }
    
    await batch.commit();
    await _updateUserLastModified();
  }
  
  Future<void> _syncCyclesFromCloud() async {
    final cyclesCollection = _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('cycles');
    
    final snapshot = await cyclesCollection.get();
    
    for (final doc in snapshot.docs) {
      try {
        final encryptedData = doc.data();
        final decryptedData = _decryptData(encryptedData);
        final cycle = CycleData.fromMap(decryptedData);
        
        await _databaseService.updateCycle(cycle);
      } catch (e) {
        debugPrint('Error decrypting cycle data: $e');
      }
    }
  }
  
  Future<void> _syncTrackingDataToCloud() async {
    final trackingData = await _databaseService.getAllTrackingData();
    final trackingCollection = _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('tracking');
    
    final batch = _firestore.batch();
    
    for (final data in trackingData) {
      final dataMap = data.toMap();
      final encryptedData = _encryptData(dataMap);
      
      final docRef = trackingCollection.doc(data.id);
      batch.set(docRef, encryptedData, SetOptions(merge: true));
    }
    
    await batch.commit();
    await _updateUserLastModified();
  }
  
  Future<void> _syncTrackingDataFromCloud() async {
    final trackingCollection = _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .collection('tracking');
    
    final snapshot = await trackingCollection.get();
    
    for (final doc in snapshot.docs) {
      try {
        final encryptedData = doc.data();
        final decryptedData = _decryptData(encryptedData);
        final trackingData = DailyTrackingData.fromMap(decryptedData);
        
        await _databaseService.saveDailyTracking(trackingData);
      } catch (e) {
        debugPrint('Error decrypting tracking data: $e');
      }
    }
  }
  
  Future<void> _syncBiometricDataToCloud() async {
    // Implementation for biometric data sync
    // Similar pattern to cycles and tracking data
  }
  
  Future<void> _syncBiometricDataFromCloud() async {
    // Implementation for biometric data sync from cloud
    // Similar pattern to cycles and tracking data
  }
  
  Future<void> _syncUserPreferencesToCloud() async {
    final preferences = await _preferencesService.getAllPreferences();
    final userDoc = _firestore.collection('users').doc(currentUser!.uid);
    
    final encryptedPreferences = _encryptData(preferences);
    
    await userDoc.update({
      'preferences': encryptedPreferences,
      'lastModified': FieldValue.serverTimestamp(),
    });
  }
  
  Future<void> _syncUserPreferencesFromCloud() async {
    final userDoc = await _firestore
        .collection('users')
        .doc(currentUser!.uid)
        .get();
    
    if (userDoc.exists) {
      final data = userDoc.data()!;
      if (data.containsKey('preferences')) {
        try {
          final encryptedPreferences = data['preferences'];
          final decryptedPreferences = _decryptData(encryptedPreferences);
          
          await _preferencesService.setAllPreferences(decryptedPreferences);
        } catch (e) {
          debugPrint('Error decrypting preferences: $e');
        }
      }
    }
  }
  
  Future<void> _updateUserLastModified() async {
    await _firestore.collection('users').doc(currentUser!.uid).update({
      'lastModified': FieldValue.serverTimestamp(),
    });
  }
  
  // Conflict resolution
  Future<void> resolveConflicts() async {
    // Implementation for handling sync conflicts
    // This would compare timestamps and allow user to choose which version to keep
  }
  
  // Data backup
  Future<void> createBackup() async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to create backup');
    }
    
    try {
      final backupData = {
        'cycles': await _databaseService.getAllCycles(),
        'tracking': await _databaseService.getAllTrackingData(),
        'preferences': await _preferencesService.getAllPreferences(),
        'createdAt': DateTime.now().toIso8601String(),
      };
      
      final encryptedBackup = _encryptData(backupData);
      
      await _firestore
          .collection('users')
          .doc(currentUser!.uid)
          .collection('backups')
          .add(encryptedBackup);
          
      debugPrint('Backup created successfully');
    } catch (e) {
      debugPrint('Error creating backup: $e');
      rethrow;
    }
  }
  
  Future<void> restoreFromBackup(String backupId) async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to restore backup');
    }
    
    try {
      final backupDoc = await _firestore
          .collection('users')
          .doc(currentUser!.uid)
          .collection('backups')
          .doc(backupId)
          .get();
      
      if (!backupDoc.exists) {
        throw Exception('Backup not found');
      }
      
      final encryptedBackup = backupDoc.data()!;
      final backupData = _decryptData(encryptedBackup);
      
      // Restore cycles
      final cycles = (backupData['cycles'] as List)
          .map((data) => CycleData.fromMap(data))
          .toList();
      
      for (final cycle in cycles) {
        await _databaseService.updateCycle(cycle);
      }
      
      // Restore tracking data
      final trackingData = (backupData['tracking'] as List)
          .map((data) => DailyTrackingData.fromMap(data))
          .toList();
      
      for (final data in trackingData) {
        await _databaseService.saveDailyTracking(data);
      }
      
      // Restore preferences
      await _preferencesService.setAllPreferences(backupData['preferences']);
      
      debugPrint('Backup restored successfully');
    } catch (e) {
      debugPrint('Error restoring backup: $e');
      rethrow;
    }
  }
  
  // Auto sync
  void enableAutoSync({Duration interval = const Duration(hours: 6)}) {
    // Implementation for automatic syncing at intervals
  }
  
  void disableAutoSync() {
    // Implementation to disable automatic syncing
  }
  
  // Sync status
  Future<SyncStatus> getSyncStatus() async {
    final lastLocalModified = await _databaseService.getLastModifiedTime();
    final lastCloudModified = await _getCloudLastModified();
    final lastSyncTime = await _preferencesService.getLastSyncTime();
    
    return SyncStatus(
      isSignedIn: isSignedIn,
      isSyncing: _isSyncing,
      lastLocalModified: lastLocalModified,
      lastCloudModified: lastCloudModified,
      lastSyncTime: lastSyncTime,
      needsSync: _needsSync(lastLocalModified, lastCloudModified, lastSyncTime),
    );
  }
  
  bool _needsSync(DateTime? lastLocal, DateTime? lastCloud, DateTime? lastSync) {
    if (lastSync == null) return true;
    if (lastLocal != null && lastLocal.isAfter(lastSync)) return true;
    if (lastCloud != null && lastCloud.isAfter(lastSync)) return true;
    return false;
  }
  
  // Data deletion
  Future<void> deleteCloudData() async {
    if (!isSignedIn) {
      throw Exception('User must be signed in to delete cloud data');
    }
    
    try {
      final userDoc = _firestore.collection('users').doc(currentUser!.uid);
      
      // Delete all subcollections
      await _deleteCollection(userDoc.collection('cycles'));
      await _deleteCollection(userDoc.collection('tracking'));
      await _deleteCollection(userDoc.collection('backups'));
      
      // Delete user document
      await userDoc.delete();
      
      debugPrint('Cloud data deleted successfully');
    } catch (e) {
      debugPrint('Error deleting cloud data: $e');
      rethrow;
    }
  }
  
  Future<void> _deleteCollection(CollectionReference collection) async {
    final snapshot = await collection.get();
    final batch = _firestore.batch();
    
    for (final doc in snapshot.docs) {
      batch.delete(doc.reference);
    }
    
    await batch.commit();
  }
}

// Sync status model
class SyncStatus {
  final bool isSignedIn;
  final bool isSyncing;
  final DateTime? lastLocalModified;
  final DateTime? lastCloudModified;
  final DateTime? lastSyncTime;
  final bool needsSync;
  
  SyncStatus({
    required this.isSignedIn,
    required this.isSyncing,
    this.lastLocalModified,
    this.lastCloudModified,
    this.lastSyncTime,
    required this.needsSync,
  });
}
