// Mocks generated by Mockito 5.4.6 from annotations
// in flow_ai/test/core/services/auth_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flow_ai/core/models/auth_result.dart' as _i3;
import 'package:flow_ai/core/models/user_profile.dart' as _i6;
import 'package:flow_ai/core/services/apple_signin_service.dart' as _i7;
import 'package:flow_ai/core/services/biometric_auth_service.dart' as _i4;
import 'package:flow_ai/core/services/local_user_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalAuthResult_0 extends _i1.SmartFake
    implements _i2.LocalAuthResult {
  _FakeLocalAuthResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthResult_1 extends _i1.SmartFake implements _i3.AuthResult {
  _FakeAuthResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBiometricAuthResult_2 extends _i1.SmartFake
    implements _i4.BiometricAuthResult {
  _FakeBiometricAuthResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocalUserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalUserService extends _i1.Mock implements _i2.LocalUserService {
  MockLocalUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.LocalAuthResult> createUser({
    required String? email,
    required String? password,
    required String? displayName,
    String? username,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUser, [], {
              #email: email,
              #password: password,
              #displayName: displayName,
              #username: username,
            }),
            returnValue: _i5.Future<_i2.LocalAuthResult>.value(
              _FakeLocalAuthResult_0(
                this,
                Invocation.method(#createUser, [], {
                  #email: email,
                  #password: password,
                  #displayName: displayName,
                  #username: username,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.LocalAuthResult>);

  @override
  _i5.Future<_i2.LocalAuthResult> signInUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInUser, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i5.Future<_i2.LocalAuthResult>.value(
              _FakeLocalAuthResult_0(
                this,
                Invocation.method(#signInUser, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.LocalAuthResult>);

  @override
  _i5.Future<_i2.LocalUser?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i5.Future<_i2.LocalUser?>.value(),
          )
          as _i5.Future<_i2.LocalUser?>);

  @override
  _i5.Future<bool> isUserSessionValid() =>
      (super.noSuchMethod(
            Invocation.method(#isUserSessionValid, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.LocalAuthResult> updateUserProfile(_i2.LocalUser? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [user]),
            returnValue: _i5.Future<_i2.LocalAuthResult>.value(
              _FakeLocalAuthResult_0(
                this,
                Invocation.method(#updateUserProfile, [user]),
              ),
            ),
          )
          as _i5.Future<_i2.LocalAuthResult>);

  @override
  _i5.Future<_i2.LocalUser?> getUserByEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#getUserByEmail, [email]),
            returnValue: _i5.Future<_i2.LocalUser?>.value(),
          )
          as _i5.Future<_i2.LocalUser?>);

  @override
  _i5.Future<List<_i2.LocalUser>> getAllUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getAllUsers, []),
            returnValue: _i5.Future<List<_i2.LocalUser>>.value(
              <_i2.LocalUser>[],
            ),
          )
          as _i5.Future<List<_i2.LocalUser>>);

  @override
  _i5.Future<void> setOnboardingCompleted(bool? completed) =>
      (super.noSuchMethod(
            Invocation.method(#setOnboardingCompleted, [completed]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> hasCompletedOnboarding() =>
      (super.noSuchMethod(
            Invocation.method(#hasCompletedOnboarding, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> userExists(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#userExists, [email]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i6.UserProfile?> getUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [userId]),
            returnValue: _i5.Future<_i6.UserProfile?>.value(),
          )
          as _i5.Future<_i6.UserProfile?>);

  @override
  _i5.Future<bool> deleteUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> saveUser(_i6.UserProfile? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [AppleSignInService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppleSignInService extends _i1.Mock
    implements _i7.AppleSignInService {
  MockAppleSignInService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable =>
      (super.noSuchMethod(Invocation.getter(#isAvailable), returnValue: false)
          as bool);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i3.AuthResult> signIn() =>
      (super.noSuchMethod(
            Invocation.method(#signIn, []),
            returnValue: _i5.Future<_i3.AuthResult>.value(
              _FakeAuthResult_1(this, Invocation.method(#signIn, [])),
            ),
          )
          as _i5.Future<_i3.AuthResult>);

  @override
  _i5.Future<bool> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  String getAvailabilityMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailabilityMessage, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getAvailabilityMessage, []),
            ),
          )
          as String);
}

/// A class which mocks [BiometricAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricAuthService extends _i1.Mock
    implements _i4.BiometricAuthService {
  MockBiometricAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> isAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isAvailable, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> isBiometricAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricAvailable, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<List<_i4.AppBiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBiometrics, []),
            returnValue: _i5.Future<List<_i4.AppBiometricType>>.value(
              <_i4.AppBiometricType>[],
            ),
          )
          as _i5.Future<List<_i4.AppBiometricType>>);

  @override
  _i5.Future<List<String>> getAvailableBiometricNames() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBiometricNames, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> isEnrolled() =>
      (super.noSuchMethod(
            Invocation.method(#isEnrolled, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i4.BiometricAuthResult> authenticate({
    String? localizedReason = 'Please verify your identity to access FlowSense',
    bool? useErrorDialogs = true,
    bool? stickyAuth = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [], {
              #localizedReason: localizedReason,
              #useErrorDialogs: useErrorDialogs,
              #stickyAuth: stickyAuth,
            }),
            returnValue: _i5.Future<_i4.BiometricAuthResult>.value(
              _FakeBiometricAuthResult_2(
                this,
                Invocation.method(#authenticate, [], {
                  #localizedReason: localizedReason,
                  #useErrorDialogs: useErrorDialogs,
                  #stickyAuth: stickyAuth,
                }),
              ),
            ),
          )
          as _i5.Future<_i4.BiometricAuthResult>);

  @override
  _i5.Future<bool> authenticateQuick({String? reason = 'Unlock FlowSense'}) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateQuick, [], {#reason: reason}),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  String getBiometricTypeName(_i4.AppBiometricType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricTypeName, [type]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getBiometricTypeName, [type]),
            ),
          )
          as String);

  @override
  String getBiometricIcon(_i4.AppBiometricType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricIcon, [type]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getBiometricIcon, [type]),
            ),
          )
          as String);

  @override
  _i5.Future<bool> isBiometricTypeAvailable(_i4.AppBiometricType? type) =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricTypeAvailable, [type]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i4.AppBiometricType> getPrimaryBiometricType() =>
      (super.noSuchMethod(
            Invocation.method(#getPrimaryBiometricType, []),
            returnValue: _i5.Future<_i4.AppBiometricType>.value(
              _i4.AppBiometricType.none,
            ),
          )
          as _i5.Future<_i4.AppBiometricType>);

  @override
  _i5.Future<void> stopAuthentication() =>
      (super.noSuchMethod(
            Invocation.method(#stopAuthentication, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String getBiometricSetupInstructions() =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricSetupInstructions, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getBiometricSetupInstructions, []),
            ),
          )
          as String);

  @override
  _i5.Future<bool> deviceSupportsBiometrics() =>
      (super.noSuchMethod(
            Invocation.method(#deviceSupportsBiometrics, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>> getBiometricCapabilities() =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricCapabilities, []),
            returnValue: _i5.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i5.Future<Map<String, dynamic>>);
}
