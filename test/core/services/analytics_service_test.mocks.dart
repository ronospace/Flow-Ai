// Mocks generated by Mockito 5.4.6 from annotations
// in flow_ai/test/core/services/analytics_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:typed_data' as _i8;
import 'dart:ui' as _i7;

import 'package:flow_ai/core/health/advanced_health_analytics.dart' as _i4;
import 'package:flow_ai/core/models/cycle_data.dart' as _i11;
import 'package:flow_ai/core/models/user_profile.dart' as _i10;
import 'package:flow_ai/core/services/performance_service.dart' as _i3;
import 'package:flow_ai/core/services/production_analytics_service.dart' as _i5;
import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMemoryUsage_1 extends _i1.SmartFake implements _i3.MemoryUsage {
  _FakeMemoryUsage_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeComprehensiveHealthReport_2 extends _i1.SmartFake
    implements _i4.ComprehensiveHealthReport {
  _FakeComprehensiveHealthReport_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuickHealthAssessment_3 extends _i1.SmartFake
    implements _i4.QuickHealthAssessment {
  _FakeQuickHealthAssessment_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEnhancedFertilityWindow_4 extends _i1.SmartFake
    implements _i4.EnhancedFertilityWindow {
  _FakeEnhancedFertilityWindow_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConditionScreeningResult_5 extends _i1.SmartFake
    implements _i4.ConditionScreeningResult {
  _FakeConditionScreeningResult_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductionAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductionAnalyticsService extends _i1.Mock
    implements _i5.ProductionAnalyticsService {
  MockProductionAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> initialize({String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [], {#userId: userId}),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackEvent(
    String? eventName,
    Map<String, dynamic>? properties,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#trackEvent, [eventName, properties]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackScreenView(
    String? screenName, {
    Map<String, dynamic>? properties,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackScreenView,
              [screenName],
              {#properties: properties},
            ),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackUserAction(
    String? action, {
    Map<String, dynamic>? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#trackUserAction, [action], {#context: context}),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackPerformanceMetric(
    String? metricName,
    double? value, {
    String? unit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackPerformanceMetric,
              [metricName, value],
              {#unit: unit},
            ),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackError(
    String? errorType,
    String? errorMessage, {
    String? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackError,
              [errorType, errorMessage],
              {#stackTrace: stackTrace, #context: context},
            ),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackBusinessMetric(String? metricName, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#trackBusinessMetric, [metricName, value]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackOnboardingStep(
    String? stepName,
    bool? completed, {
    int? stepNumber,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackOnboardingStep,
              [stepName, completed],
              {#stepNumber: stepNumber},
            ),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackFeatureUsage(
    String? featureName, {
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #trackFeatureUsage,
              [featureName],
              {#metadata: metadata},
            ),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackRetentionMilestone(String? milestone) =>
      (super.noSuchMethod(
            Invocation.method(#trackRetentionMilestone, [milestone]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackSessionEnd() =>
      (super.noSuchMethod(
            Invocation.method(#trackSessionEnd, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> setUserProperties(Map<String, dynamic>? properties) =>
      (super.noSuchMethod(
            Invocation.method(#setUserProperties, [properties]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> setAnalyticsEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAnalyticsEnabled, [enabled]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<Map<String, dynamic>> getAnalyticsSummary() =>
      (super.noSuchMethod(
            Invocation.method(#getAnalyticsSummary, []),
            returnValue: _i2.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i2.Future<Map<String, dynamic>>);

  @override
  _i2.Future<void> clearAnalyticsData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAnalyticsData, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackAppStart() =>
      (super.noSuchMethod(
            Invocation.method(#trackAppStart, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackAppBackground() =>
      (super.noSuchMethod(
            Invocation.method(#trackAppBackground, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackAppForeground() =>
      (super.noSuchMethod(
            Invocation.method(#trackAppForeground, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackUserLogin(String? method) =>
      (super.noSuchMethod(
            Invocation.method(#trackUserLogin, [method]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackUserLogout() =>
      (super.noSuchMethod(
            Invocation.method(#trackUserLogout, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackUserSignup(String? method) =>
      (super.noSuchMethod(
            Invocation.method(#trackUserSignup, [method]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackCycleAdded() =>
      (super.noSuchMethod(
            Invocation.method(#trackCycleAdded, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackSymptomLogged(String? symptom) =>
      (super.noSuchMethod(
            Invocation.method(#trackSymptomLogged, [symptom]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackAIPredictionViewed() =>
      (super.noSuchMethod(
            Invocation.method(#trackAIPredictionViewed, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<void> trackSettingsChanged(String? setting) =>
      (super.noSuchMethod(
            Invocation.method(#trackSettingsChanged, [setting]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);
}

/// A class which mocks [PerformanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceService extends _i1.Mock
    implements _i3.PerformanceService {
  MockPerformanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  void startTrace(String? traceName) => super.noSuchMethod(
    Invocation.method(#startTrace, [traceName]),
    returnValueForMissingStub: null,
  );

  @override
  Duration? stopTrace(String? traceName) =>
      (super.noSuchMethod(Invocation.method(#stopTrace, [traceName]))
          as Duration?);

  @override
  _i2.Future<T> measureAsync<T>(
    String? traceName,
    _i2.Future<T> Function()? function,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#measureAsync, [traceName, function]),
            returnValue:
                _i6.ifNotNull(
                  _i6.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#measureAsync, [traceName, function]),
                  ),
                  (T v) => _i2.Future<T>.value(v),
                ) ??
                _FakeFuture_0<T>(
                  this,
                  Invocation.method(#measureAsync, [traceName, function]),
                ),
          )
          as _i2.Future<T>);

  @override
  T measureSync<T>(String? traceName, T Function()? function) =>
      (super.noSuchMethod(
            Invocation.method(#measureSync, [traceName, function]),
            returnValue: _i6.dummyValue<T>(
              this,
              Invocation.method(#measureSync, [traceName, function]),
            ),
          )
          as T);

  @override
  void cacheData(String? key, dynamic data, {Duration? expiry}) =>
      super.noSuchMethod(
        Invocation.method(#cacheData, [key, data], {#expiry: expiry}),
        returnValueForMissingStub: null,
      );

  @override
  T? getCachedData<T>(String? key) =>
      (super.noSuchMethod(Invocation.method(#getCachedData, [key])) as T?);

  @override
  _i2.Future<_i7.Image?> cacheOptimizedImage(
    String? key,
    _i8.Uint8List? imageData, {
    int? targetWidth,
    int? targetHeight,
    int? quality = 85,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #cacheOptimizedImage,
              [key, imageData],
              {
                #targetWidth: targetWidth,
                #targetHeight: targetHeight,
                #quality: quality,
              },
            ),
            returnValue: _i2.Future<_i7.Image?>.value(),
          )
          as _i2.Future<_i7.Image?>);

  @override
  _i2.Future<void> preloadCriticalResources(_i9.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#preloadCriticalResources, [context]),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  void optimizeMemory() => super.noSuchMethod(
    Invocation.method(#optimizeMemory, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.MemoryUsage getMemoryUsage() =>
      (super.noSuchMethod(
            Invocation.method(#getMemoryUsage, []),
            returnValue: _FakeMemoryUsage_1(
              this,
              Invocation.method(#getMemoryUsage, []),
            ),
          )
          as _i3.MemoryUsage);

  @override
  List<_i3.PerformanceMetric> getMetrics({Duration? since}) =>
      (super.noSuchMethod(
            Invocation.method(#getMetrics, [], {#since: since}),
            returnValue: <_i3.PerformanceMetric>[],
          )
          as List<_i3.PerformanceMetric>);

  @override
  double getAverageMetric(String? metricName, {Duration? since}) =>
      (super.noSuchMethod(
            Invocation.method(#getAverageMetric, [metricName], {#since: since}),
            returnValue: 0.0,
          )
          as double);

  @override
  void clearAllCaches() => super.noSuchMethod(
    Invocation.method(#clearAllCaches, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AdvancedHealthAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdvancedHealthAnalytics extends _i1.Mock
    implements _i4.AdvancedHealthAnalytics {
  MockAdvancedHealthAnalytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i2.Stream<_i4.HealthInsight> get healthInsightStream =>
      (super.noSuchMethod(
            Invocation.getter(#healthInsightStream),
            returnValue: _i2.Stream<_i4.HealthInsight>.empty(),
          )
          as _i2.Stream<_i4.HealthInsight>);

  @override
  _i2.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i2.Future<void>.value(),
            returnValueForMissingStub: _i2.Future<void>.value(),
          )
          as _i2.Future<void>);

  @override
  _i2.Future<_i4.ComprehensiveHealthReport> generateHealthReport({
    required _i10.UserProfile? user,
    required List<_i11.CycleData>? cycleHistory,
    required String? currentPhase,
    Map<String, dynamic>? additionalData,
    int? analysisDepth = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#generateHealthReport, [], {
              #user: user,
              #cycleHistory: cycleHistory,
              #currentPhase: currentPhase,
              #additionalData: additionalData,
              #analysisDepth: analysisDepth,
            }),
            returnValue: _i2.Future<_i4.ComprehensiveHealthReport>.value(
              _FakeComprehensiveHealthReport_2(
                this,
                Invocation.method(#generateHealthReport, [], {
                  #user: user,
                  #cycleHistory: cycleHistory,
                  #currentPhase: currentPhase,
                  #additionalData: additionalData,
                  #analysisDepth: analysisDepth,
                }),
              ),
            ),
          )
          as _i2.Future<_i4.ComprehensiveHealthReport>);

  @override
  _i2.Future<_i4.QuickHealthAssessment> performQuickAssessment({
    required _i10.UserProfile? user,
    required String? currentPhase,
    Map<String, dynamic>? currentSymptoms,
    Map<String, dynamic>? recentBiometrics,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#performQuickAssessment, [], {
              #user: user,
              #currentPhase: currentPhase,
              #currentSymptoms: currentSymptoms,
              #recentBiometrics: recentBiometrics,
            }),
            returnValue: _i2.Future<_i4.QuickHealthAssessment>.value(
              _FakeQuickHealthAssessment_3(
                this,
                Invocation.method(#performQuickAssessment, [], {
                  #user: user,
                  #currentPhase: currentPhase,
                  #currentSymptoms: currentSymptoms,
                  #recentBiometrics: recentBiometrics,
                }),
              ),
            ),
          )
          as _i2.Future<_i4.QuickHealthAssessment>);

  @override
  _i2.Future<_i4.EnhancedFertilityWindow> predictFertilityWindow({
    required _i10.UserProfile? user,
    required List<_i11.CycleData>? cycleHistory,
    Map<String, dynamic>? biometricData,
    int? predictionDays = 14,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#predictFertilityWindow, [], {
              #user: user,
              #cycleHistory: cycleHistory,
              #biometricData: biometricData,
              #predictionDays: predictionDays,
            }),
            returnValue: _i2.Future<_i4.EnhancedFertilityWindow>.value(
              _FakeEnhancedFertilityWindow_4(
                this,
                Invocation.method(#predictFertilityWindow, [], {
                  #user: user,
                  #cycleHistory: cycleHistory,
                  #biometricData: biometricData,
                  #predictionDays: predictionDays,
                }),
              ),
            ),
          )
          as _i2.Future<_i4.EnhancedFertilityWindow>);

  @override
  _i2.Future<_i4.ConditionScreeningResult> screenForConditions({
    required _i10.UserProfile? user,
    required List<_i11.CycleData>? cycleHistory,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#screenForConditions, [], {
              #user: user,
              #cycleHistory: cycleHistory,
              #additionalData: additionalData,
            }),
            returnValue: _i2.Future<_i4.ConditionScreeningResult>.value(
              _FakeConditionScreeningResult_5(
                this,
                Invocation.method(#screenForConditions, [], {
                  #user: user,
                  #cycleHistory: cycleHistory,
                  #additionalData: additionalData,
                }),
              ),
            ),
          )
          as _i2.Future<_i4.ConditionScreeningResult>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
